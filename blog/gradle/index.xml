<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gradle on Client Infra</title><link>https://clientinfra.com/blog/gradle/</link><description>Recent content in Gradle on Client Infra</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 29 Jun 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://clientinfra.com/blog/gradle/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Gradle 解决 Android 模块化项目中的多语言支持</title><link>https://clientinfra.com/gradle-support-android-i18n/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0800</pubDate><guid>https://clientinfra.com/gradle-support-android-i18n/</guid><description>近年来越来越多的开发者和企业把目光聚焦于海外，寻求新的增长机会。然而对于一个“土生土长”的应用，想要在海外分一杯羹面临着诸多挑战，例如当地法律法规、网络环境、用户偏好等，其中最重要的恐怕就是&amp;quot;语言支持&amp;quot;了。据 Humans 分析统计，当一个APP被翻译成某一国家的母语后，收入会增加26%，下载量会提高120%。另外，如果一个 APP 支持英语、西语和中文三种语言，几乎能够覆盖全球50%的用户，可见语言支持的重要性。
为了支持多语言，通常需要将项目中所有的字符串资源提取，交给翻译人员，然后将翻译后的字符串资源导入到项目。而对于动辄上百个模块，轻则几十个模块的模块化项目来说，字符串资源会分布在各个模块，提取字符串资源的难度和模块的数量成正比。使用脚本扫描整个工程目录可能是最简单的方案——但对使用 MultiRepo 管理代码的工程，工程往往只依赖模块的aar，仅在开发过程中才会依赖源码，如果没有相应的基础设施，需要手动 clone 所有的模块源码，这无疑也是一件麻烦事。那么有没有一种方法，不需要繁琐的操作就可以让我们拿到对应的资源呢？
对使用 Monorepo 或者非模块的工程，处理字符串资源并不是麻烦事，所以不在本文的讨论范围。
切入点分析 对于字符串资源来说，同样一个词语，在不同的上下文中具有不同的含义，例如“好的“在聊天模块作为快捷回复用语翻译为 &amp;ldquo;Okay&amp;rdquo; ，在隐私协议界面作为接受约定翻译为 &amp;ldquo;Agreed&amp;rdquo; ，所以字符串资源所在的模块对于字符的翻译也是一个重要的辅助信息，导出时要包含所属模块信息。
而对于第三方比如 AndroidX 等库的字符串资源，有的是已翻译的，有的则没有必要翻译（内部调试页面），所以我们要在实际导出过程中排除这些字段。
结合上面两点，总结我们的需求就是：能够判断字符串资源属于哪个模块，有了这个前提我们可以很容易筛选出哪些是我们关注的模块内的资源，哪些资源我们不关心应该排除。带着这个目标，分析一下能达成此目标的切入点，从而确定最终的方案。
APK 中的 resources.arsc resources.arsc 是 Android 资源构建的产物，得益于它和资源文件、以及 R字节码文件的同时存在于 APK 中，应用开发者才能够方便的以 R.xxx.xxx 直接获取到对应的资源。resources.arsc 在这一过程中担任了资源映射的角色，负责在实际运行中映射 R.java 的引用资源 id 到实际的资源，而字符串资源也由resources.arsc 负责映射，R.string.xxx 对应的字符串可以通过查询 resources.arsc 得到。
要判断 resources.arsc 能否满足我们的需求，就需要对 resources.arsc 的定义和结构有一定的认识，resource.arsc 由 AAPT2 构建资源文件后生成，阅读AAPT2 源码是一种正统的途径，幸运的是由于Android开发工具链的完善，我们使用 Android Studio 的APK 分析器，可以更容易的查看 resources.arsc 的结构。
以 Android Studio 新建一个默认项目为例，打包后通过 Android Studio 的APK 分析器查看 resources.arsc 文件，从图中可以看到，resources.arsc 中的字符串资源没有所属模块的相关信息，并不能满足我们的需求，所以此方案不通。 AAR 文件中的 R.</description></item></channel></rss>